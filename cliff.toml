[remote.github]
owner = "SweetSmellFox"
repo = "MFATools"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages

# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "新增 | Feat" },
    { message = "^fix", group = "修复 | Fix" },
    { message = "^docs", group = "文档 | Docs" },
    { message = "^perf", group = "优化 | Perf" },
    { message = "^refactor\\(clippy\\)", skip = true },
    { message = "^refactor", group = "重构 | Refactor" },
    { message = "^style", group = "样式 | Style" },
    { message = "^test", group = "测试 | Test" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
    { message = "^chore", group = "杂项 | Chore" },
    { message = "^other", group = "其它 | Other" },
    { message = "^ci", group = "集成 | CI" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc|v2.1.0|v2.1.1"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
